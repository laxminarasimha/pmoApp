var express = require("express"),
 router = express.Router(),
 locationDAO = require("../models/locationDAO.js");
 
router.get("/", function(req, res) {
 locationDAO.find({},null, {sort:{locationname: 1}}, function(err, data) {
 if (err) {
 res.send("error");
 return;
 }
 res.send(data);
 });
}).get("/:id", function(req, res) {
 var id = req.params.id;
 locationDAO.find({ _id: id }, function(err, data) {
 if (err) {
 res.send("error");
 return;
 }
 res.send(data[0]);
 });
}).get("/locationname/:locationname", function(req, res) {
 var location = req.params.locationname;
console.log("location:"+location);
 locationDAO.aggregate([
      {
      $project: {
        //Convert EndUser to UpperCase
        "locationname": {
          "$let": {
            //var declaration
            "vars": {
              "locationVar": "$locationname"
            },
            "in": {
              //conversion to upper case
              "$toUpper": "$$locationVar"
            }
          }
        },
       
      }
    },
 
    // Stage 2: match using in operator
    {
      $match: {
        "locationname" : {
          "$in" : [
            location.toUpperCase()
          ]
        }
      }
    }
 
  ], function(err, data) {
	 if (err) {
	 res.send("error");
	 return;
	 }

	 console.log(data);
	 res.send(data);
	 });
}).post("/", function(req, res) {
 var obj = req.body;
 var model = new locationDAO(obj);
 model.save(function(err) {
 if (err) {
 console.log(err);
 res.send("error");
 return;
 }
 res.send("created");
 });
}).put("/:id", function(req, res) {
 var id = req.params.id;
 var obj = req.body;
 
 locationDAO.findByIdAndUpdate(id, { locationname: obj.locationname}, 
function(err) {
 if (err) {
 res.send("error");
 return;
 }
 res.send("updated");
 });
}).delete("/:id", function(req, res) {
 var id = req.params.id;
 locationDAO.findByIdAndRemove(id, function(err) {
 if (err) {
 res.send("error");
 return;
 }
 res.send("deleted");
 });
});
 
module.exports = router;


